from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
import random
import math
import tkinter.messagebox as mb

# Создание окна регистрации и аторизации
root = Tk()
root.title("Регистрация и авторизация")
root.geometry("400x400")
frame = Frame(root)
au_password = StringVar()
reg_password = StringVar()
au_login = StringVar()
reg_login = StringVar()
bg = PhotoImage(file="backgrimage.png")

# Массив моделирования игрового поля
chessplace = [[0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0]]
pole = [[0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0]]

# Ввод логина и пароля в окне регистрации и авторизации
def entry_regist_and_login():
    # Регистрация
    canvas = Canvas(root, width=400, height=400)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bg, anchor="nw")
    canvas.create_text(200, 25, text='Регистрация', font='30', fill="#FFFFFF")
    canvas.create_text(200, 60, text='Введите логин')
    entry_login = Entry(root, textvariable=reg_login)
    entry_login = canvas.create_window(140, 70, anchor="nw", window=entry_login)
    canvas.create_text(200, 110, text='Введите пароль')
    entry_password = Entry(root, textvariable=reg_password, show='*')
    entry_password = canvas.create_window(140, 120, anchor="nw", window=entry_password)
    button_a = Button(root, text='Зарегистрироваться', command=reg_login_and_password_error, bg='#FFFFFF')
    button_a = canvas.create_window(140, 160, anchor="nw", window=button_a)
    # Авторизация
    canvas.create_text(200, 220, text='Авторизация', font='30', fill="#FFFFFF")
    canvas.create_text(200, 250, text='Введите логин')
    entry_login = Entry(root, textvariable=au_login)
    entry_login = canvas.create_window(140, 260, anchor="nw", window=entry_login)
    canvas.create_text(200, 300, text='Введите пароль')
    entry_password = Entry(root, textvariable=au_password, show='*')
    entry_password = canvas.create_window(140, 310, anchor="nw", window=entry_password)
    button_r = Button(root, text='Авторизироваться', command=au_login_and_password_error, bg='#FFFFFF')
    button_r = canvas.create_window(145, 350, anchor="nw", window=button_r)

# Проверка на ошибку авторизации
def au_login_and_password_error():
    if (len(au_login.get()) == 0 or len(au_password.get()) == 0) or (
            len(au_login.get()) == 0 and len(au_password.get()) == 0) or au_login.get().count(' ') > 0 or \
            au_password.get().count(' ') > 0:
        mb.showerror("Ошибка", "Должны быть введены данные")
    else:
        file = open('reg_login.txt', 'r')
        while TRUE:
            line = file.readline()
            line = line.split()
            # Ошибка авторизации
            if len(line) == 0:
                file.close()
                mb.showerror("Ошибка", "Неверные логин или пароль")
                break
            # Успешная авторизация
            elif line[0] == au_login.get() and line[1] == au_password.get():
                file.close()
                root.destroy()
                window = Tk()
                window.title("Успешная авторизация")
                window.geometry("400x400")
                canvas = Canvas(window, width=400, height=400)
                canvas.pack(fill="both", expand=True)
                img = PhotoImage(file="bckgrimg.png")
                image = canvas.create_image(200, 200, image = img)
                canvas.create_text(200, 200, text='Вы успешно авторизированы!', font='30')
                button_w = Button(window, text='Начать игру', command= lambda: draw_chessboard(window))
                button_w = canvas.create_window(200, 250, window=button_w)
                window.grab_set()
                window.resizable(width=False, height=False)
                window.mainloop()
                break

# Проверка на ошибку регистрации
def reg_login_and_password_error():
    # Проверка на пустое поле
    if (len(reg_login.get()) == 0 or len(reg_password.get()) == 0) or (
        len(reg_login.get()) == 0 and len(reg_password.get()) == 0) or reg_login.get().count(' ') > 0 or \
        reg_password.get().count(' ') > 0:
        mb.showerror("Ошибка", "Введены неверные данные")
    # Проверка на длину логина и пароля
    elif len(reg_login.get()) <= 5 or len(reg_password.get()) <= 5:
        mb.showerror("Ошибка", "Логин и пароль должны состоять не менее чем из 6 символов")
    else:
        file = open('reg_login.txt', 'r')
        while TRUE:
            line = file.readline()
            line = line.split()
            # Проверка на совпадение логина и пароля
            if line[0] == reg_login.get() and line[1] == reg_password.get():
                file.close()
                mb.showerror("Ошибка", "Логин и пароль уже существуют")
                break
            # Успешня регистрация
            else:
                file.close()
                file = open('reg_login.txt', 'a+')
                file.write(reg_login.get() + ' ' + reg_password.get() + '\n')
                file.close()
                mb.showinfo("Успешная регистрация", "Вы успешно зарегистрировались. Пожалуйста, авторизуйтесь")
                break
entry_regist_and_login()

# Отрисовка игрового поля
def draw_chessboard(window):
    window.destroy()
    chessboard = Tk()
    chessboard.title("Текущая игра")
    chessboard.geometry("900x900")
    chessboard.resizable(width=False, height=False)
    canvas = Canvas(chessboard)
    canvas.pack(fill="both", expand=True)
    # Буквенные обозначения по краям поля
    # Снизу
    canvas.create_text(100, 875, text='A'), canvas.create_text(200, 875, text='B'), canvas.create_text(300, 875, text='C')
    canvas.create_text(400, 875, text='D'), canvas.create_text(500, 875, text='E'), canvas.create_text(600, 875, text='F')
    canvas.create_text(700, 875, text='G'), canvas.create_text(800, 875, text='H')
    # Сверху
    canvas.create_text(100, 25, text='H'), canvas.create_text(200, 25, text='G'), canvas.create_text(300, 25, text='F')
    canvas.create_text(400, 25, text='E'), canvas.create_text(500, 25, text='D'), canvas.create_text(600, 25, text='C')
    canvas.create_text(700, 25, text='B'), canvas.create_text(800, 25, text='A')
    # Численные обозначения по краям поля
    # Справа
    canvas.create_text(875, 100, text='1'), canvas.create_text(875, 200, text='2'), canvas.create_text(875, 300, text='3')
    canvas.create_text(875, 400, text='4'), canvas.create_text(875, 500, text='5'), canvas.create_text(875, 600, text='6')
    canvas.create_text(875, 700, text='7'), canvas.create_text(875, 800, text='8')
    # Слева
    canvas.create_text(25, 100, text='8'), canvas.create_text(25, 200, text='7'), canvas.create_text(25, 300, text='6')
    canvas.create_text(25, 400, text='5'), canvas.create_text(25, 500, text='4'), canvas.create_text(25, 600, text='3')
    canvas.create_text(25, 700, text='2'), canvas.create_text(25, 800, text='1')
    # Создание шахматных клеток
    canvas_board = Canvas(chessboard, bg='white', width=800, height=800)
    canvas_board.place(x=50, y=50)
    global color
    worb = 0
    row = 0
    col = 0
    # Определение цвета клетки
    for i in range(8):
        for j in range(8):
            worb += 1
            if i % 2 == 0:
                if worb % 2 == 0:
                    color = "white"
                else:
                    color = "black"
            elif i % 2 != 0:
                if worb % 2 != 0:
                    color = "white"
                else:
                    color = "black"
            pole[i][j] = (Button(chessboard, bg=color, relief="flat"))
            canvas_board.create_window(row, col, anchor=NW, window=pole[i][j], width=100, height=100)
            row += 100
        row = 0
        col += 100
    print(pole)
    canvas.pack()
    # Размещение шахматных фигур на поле
    global chessplace
    img1 = PhotoImage(master = canvas_board, file="img1.png")
    img2 = PhotoImage(master = canvas_board, file="img2.png")
    img3 = PhotoImage(master = canvas_board, file="img3.png")
    img4 = PhotoImage(master = canvas_board, file="img4.png")
    # Начальное расположение
    i_wking = random.randrange(0,8,2)
    j_wking = random.randrange(1,9,2)
    i_bking = random.randrange(1,9,2)
    j_bking = random.randrange(1,9,2)
    i_wrook = random.randrange(0,8,2)
    j_wrook = random.randrange(1,9,2)
    i_brook = random.randrange(1,9,2)
    j_brook = random.randrange(1,9,2)
    # Выставление веса фигур и картинок
    if chessplace[i_wking][j_wking] == 0:
        chessplace[i_wking][j_wking] = 2
    pole[i_wking][j_wking]['image'] = img3

    if chessplace[i_bking][j_bking] == 0:
        chessplace[i_bking][j_bking] = -2
    pole[i_bking][j_bking]['image'] = img4

    if chessplace[i_wrook][j_wrook] == 0:
        chessplace[i_wrook][j_wrook] = 1
    pole[i_wrook][j_wrook]['image'] = img2

    if chessplace[i_brook][j_brook] == 0:
        chessplace[i_brook][j_brook] = -1
    pole[i_brook][j_brook]['image'] = img1
    print(chessplace)
    chessboard.mainloop()
root.resizable(width=False, height=False)
root.mainloop()
