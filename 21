from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
import random
import math
import tkinter.messagebox as mb

# Создание окна регистрации и аторизации
root = Tk()
root.title("Регистрация и авторизация")
root.geometry("400x400")
frame = Frame(root)
au_password = StringVar()
reg_password = StringVar()
au_login = StringVar()
reg_login = StringVar()
bg = PhotoImage(file="backgrimage.png")
check_shah_cher = 0
check_shah_bel = 0
poz_lad_x_bel = 0
poz_lad_y_bel = 0
poz_lad_x_cher = 0
poz_lad_y_cher = 0

# Массив моделирования игрового поля
global chessplace
chessplace = [[0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0]]
global pole
ngo = 1
y_last = 0
x_last= 0
pole = [[0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0]]
def check_hod(x,y,k,clear):
    global check_shah_cher,check_shah_bel
    if clear == 0:
        if k == 2 or k ==-2:
            for i in range(y+1,8):
                if(i >=0 and i <8) and pole[x][i]['image'] == '':
                    pole[x][i]['image'] = circle
                elif (i >=0 and i <8) and pole[x][i]['image'] != '':
                        break
            for i1 in range(y-1,0-1,-1):
                print(i1)
                if (i1 >=0 and i1 <8) and pole[x][i1]['image'] == '':
                    pole[x][i1]['image'] = circle
                elif (i1 >=0 and i1 <8) and pole[x][i1]['image'] != '':
                        break
            for i2 in range(x+1,8):
                if (i2 >=0 and i2 <8) and pole[i2][y]['image'] == '':
                    pole[i2][y]['image'] = circle
                elif (i2 >=0 and i2 <8) and pole[i2][y]['image'] != '':
                    break
            for i3 in range(x-1,0-1,-1):
                if (i3 >=0 and i3 <8) and pole[i3][y]['image'] == '':
                    pole[i3][y]['image'] = circle
                elif (i3 >=0 and i3 <8) and pole[i3][y]['image'] != '':
                    break
        elif k == 1 or k == -1:
            for i in range(x-1,x+2):
                for j in range(y - 1, y + 2):
                    if ((i >=0 and i <8) and (j >=0 and j <8)) and pole[i][j]['image'] == '':
                        pole[i][j]['image'] = circle
    elif clear == 1:
        if k == 2 or k == -2:
            for i in range(y + 1, 8):
                if (i >= 0 and i < 8) and (chessplace[x][i] == 0):
                    pole[x][i]['image'] = ''
            for i1 in range(y - 1, 0 - 1, -1):
                if (i1 >= 0 and i1 < 8)and (chessplace[x][i1] == 0):
                    pole[x][i1]['image'] = ''
            for i2 in range(x + 1, 8):
                if (i2 >= 0 and i2 < 8)and (chessplace[i2][y] == 0):
                    pole[i2][y]['image'] = ''
            for i3 in range(x - 1, 0 - 1, -1):
                if (i3 >= 0 and i3 < 8)and (chessplace[i3][y] == 0):
                    pole[i3][y]['image'] = ''
        elif k == 1 or k == -1:
            for i in range(x-2,x+2):
                for j in range(y - 2, y + 2):
                    print(i,j)
                    if ((i >=0 and i <8) and (j >=0 and j <8)) and (chessplace[i][j] == 0):
                        pole[i][j]['image'] = ''
    elif clear == 2:
        if k == 2 or k == -2:
            for i in range(y + 1, 8):
                if (i >= 0 and i < 8) and (chessplace[x][i] == 0):
                    if k == 2 and chessplace[x][i] == -1:
                        check_shah_bel += 1
                    elif k == -2 and chessplace[x][i] == 1:
                        check_shah_cher += 1
                    else:
                        break
            for i1 in range(y - 1, 0 - 1, -1):
                if (i1 >= 0 and i1 < 8)and (chessplace[x][i1] == 0):
                    if k == 2 and chessplace[x][i1] == -1:
                        check_shah_bel += 1
                    elif k == -2 and chessplace[x][i1] == 1:
                        check_shah_cher += 1
                    else:
                        break
            for i2 in range(x + 1, 8):
                if (i2 >= 0 and i2 < 8)and (chessplace[i2][y] == 0):
                    if k == 2 and chessplace[i2][y] == -1:
                        check_shah_bel += 1
                    elif k == -2 and chessplace[i2][y] == -1:
                        check_shah_cher += 1
                    else:
                        break
            for i3 in range(x - 1, 0 - 1, -1):
                if (i3 >= 0 and i3 < 8)and (chessplace[i3][y] == 0):
                    if k == 2 and chessplace[i3][y] == -1:
                        check_shah_bel += 1
                    elif k == -2 and chessplace[i3][y] == 1:
                        check_shah_cher += 1
                    else:
                        break
        elif k == 1 or k == -1:
            for i in range(x-2,x+2):
                for j in range(y - 2, y + 2):
                    print(i,j)
                    if ((i >=0 and i <8) and (j >=0 and j <8)) and (chessplace[i][j] == 0):
                        if k == 1 and chessplace[i][j] == -2:
                            check_shah_bel += 1
                        elif k == -1 and chessplace[i][j] == 2:
                            check_shah_cher += 1
                        else:
                            break
def check(i,x,y):
    global ngo,x_last,y_last,last_color,last_image,poz_bel_x,poz_bel_y,poz_cher_x,poz_cher_y,check_shah_bel,check_shah_cher,poz_lad_x_bel,poz_lad_y_bel,poz_lad_x_cher,poz_lad_y_cher
    if ngo == 1 and pole[x][y]['image']!='':
        if (check_shah_cher == 1 and chessplace[x][y] != -1):
            mb.showerror(title="Not", message="Неверный ход")
            ngo = 1
            return
        elif (check_shah_bel == 1 and chessplace[x][y] != 1):
            mb.showerror(title="Not", message="Неверный ход")
            ngo = 1
            return
        elif (check_shah_bel == 1 and chessplace[x][y] == 1):
            ngo = 2
            last_image = pole[x][y]['image']
            x_last = x
            y_last = y
            check_hod(x, y, chessplace[x][y], 0)
        elif (check_shah_cher == 1 and chessplace[x][y] == -1):
            ngo = 2
            last_image = pole[x][y]['image']
            x_last = x
            y_last = y
            check_hod(x, y, chessplace[x][y], 0)
        else:
            ngo = 2
            last_image = pole[x][y]['image']
            x_last = x
            y_last = y
            check_hod(x, y, chessplace[x][y], 0)
    elif ngo ==2:
        if pole[x][y]['image'] == str(circle):
            chessplace[x][y] = chessplace[x_last][y_last]
            chessplace[x_last][y_last] = 0
            if chessplace[x][y] == -1:
                check_shah_cher = 0
            if chessplace[x][y] == 1:
                check_shah_bel = 0
            pole[x][y]['image'] = last_image
            pole[x_last][y_last]['image'] = ''
            check_hod(x_last, y_last, chessplace[x][y], 1)
            ngo = 1
            check_hod(x, y, chessplace[x][y], 2)
            if check_shah_bel > 1:
                mb.showinfo(title="ok", message="Победили чёрные")
            elif check_shah_cher > 1:
                mb.showinfo(title="ok", message="Победили белые")
    elif x == x_last and y == y_last:
        mb.showinfo(title="ok", message="Фигура больше выбрана")
        ngo = 1
    print(check_shah_bel, check_shah_cher)
# Ввод логина и пароля в окне регистрации и авторизации
def entry_regist_and_login():
    # Регистрация
    canvas = Canvas(root, width=400, height=400)
    canvas.pack(fill="both", expand=True)
    canvas.create_image(0, 0, image=bg, anchor="nw")
    canvas.create_text(200, 25, text='Регистрация', font='30', fill="#FFFFFF")
    canvas.create_text(200, 60, text='Введите логин')
    entry_login = Entry(root, textvariable=reg_login)
    entry_login = canvas.create_window(140, 70, anchor="nw", window=entry_login)
    canvas.create_text(200, 110, text='Введите пароль')
    entry_password = Entry(root, textvariable=reg_password, show='*')
    entry_password = canvas.create_window(140, 120, anchor="nw", window=entry_password)
    button_a = Button(root, text='Зарегистрироваться', command=reg_login_and_password_error, bg='#FFFFFF')
    button_a = canvas.create_window(140, 160, anchor="nw", window=button_a)
    # Авторизация
    canvas.create_text(200, 220, text='Авторизация', font='30', fill="#FFFFFF")
    canvas.create_text(200, 250, text='Введите логин')
    entry_login = Entry(root, textvariable=au_login)
    entry_login = canvas.create_window(140, 260, anchor="nw", window=entry_login)
    canvas.create_text(200, 300, text='Введите пароль')
    entry_password = Entry(root, textvariable=au_password, show='*')
    entry_password = canvas.create_window(140, 310, anchor="nw", window=entry_password)
    button_r = Button(root, text='Авторизироваться', command=au_login_and_password_error, bg='#FFFFFF')
    button_r = canvas.create_window(145, 350, anchor="nw", window=button_r)

# Проверка на ошибку авторизации
def au_login_and_password_error():
    if (len(au_login.get()) == 0 or len(au_password.get()) == 0) or (
            len(au_login.get()) == 0 and len(au_password.get()) == 0) or au_login.get().count(' ') > 0 or \
            au_password.get().count(' ') > 0:
        mb.showerror("Ошибка", "Должны быть введены данные")
    else:
        file = open('reg_login.txt', 'r')
        while TRUE:
            line = file.readline()
            line = line.split()
            # Ошибка авторизации
            if len(line) == 0:
                file.close()
                mb.showerror("Ошибка", "Неверные логин или пароль")
                break
            # Успешная авторизация
            elif line[0] == au_login.get() and line[1] == au_password.get():
                file.close()
                root.destroy()
                window = Tk()
                window.title("Успешная авторизация")
                window.geometry("400x400")
                canvas = Canvas(window, width=400, height=400)
                canvas.pack(fill="both", expand=True)
                img = PhotoImage(file="bckgrimg.png")
                image = canvas.create_image(200, 200, image = img)
                canvas.create_text(200, 200, text='Вы успешно авторизированы!', font='30')
                button_w = Button(window, text='Начать игру', command= lambda: draw_chessboard(window))
                button_w = canvas.create_window(200, 250, window=button_w)
                window.grab_set()
                window.resizable(width=False, height=False)
                window.mainloop()
                break

# Проверка на ошибку регистрации
def reg_login_and_password_error():
    # Проверка на пустое поле
    if (len(reg_login.get()) == 0 or len(reg_password.get()) == 0) or (
        len(reg_login.get()) == 0 and len(reg_password.get()) == 0) or reg_login.get().count(' ') > 0 or \
        reg_password.get().count(' ') > 0:
        mb.showerror("Ошибка", "Введены неверные данные")
    # Проверка на длину логина и пароля
    elif len(reg_login.get()) <= 5 or len(reg_password.get()) <= 5:
        mb.showerror("Ошибка", "Логин и пароль должны состоять не менее чем из 6 символов")
    else:
        file = open('reg_login.txt', 'r')
        while TRUE:
            line = file.readline()
            line = line.split()
            # Проверка на совпадение логина и пароля
            if line[0] == reg_login.get() and line[1] == reg_password.get():
                file.close()
                mb.showerror("Ошибка", "Логин и пароль уже существуют")
                break
            # Успешня регистрация
            else:
                file.close()
                file = open('reg_login.txt', 'a+')
                file.write(reg_login.get() + ' ' + reg_password.get() + '\n')
                file.close()
                mb.showinfo("Успешная регистрация", "Вы успешно зарегистрировались. Пожалуйста, авторизуйтесь")
                break
entry_regist_and_login()

# Отрисовка игрового поля
def draw_chessboard(window):
    global poz_cher_x,poz_cher_y,poz_bel_x,poz_bel_y
    window.destroy()
    chessboard = Tk()
    chessboard.title("Текущая игра")
    chessboard.geometry("900x900")
    chessboard.resizable(width=False, height=False)
    canvas = Canvas(chessboard)
    canvas.pack(fill="both", expand=True)
    # Буквенные обозначения по краям поля
    # Снизу
    canvas.create_text(100, 875, text='A'), canvas.create_text(200, 875, text='B'), canvas.create_text(300, 875, text='C')
    canvas.create_text(400, 875, text='D'), canvas.create_text(500, 875, text='E'), canvas.create_text(600, 875, text='F')
    canvas.create_text(700, 875, text='G'), canvas.create_text(800, 875, text='H')
    # Сверху
    canvas.create_text(100, 25, text='H'), canvas.create_text(200, 25, text='G'), canvas.create_text(300, 25, text='F')
    canvas.create_text(400, 25, text='E'), canvas.create_text(500, 25, text='D'), canvas.create_text(600, 25, text='C')
    canvas.create_text(700, 25, text='B'), canvas.create_text(800, 25, text='A')
    # Численные обозначения по краям поля
    # Справа
    canvas.create_text(875, 100, text='1'), canvas.create_text(875, 200, text='2'), canvas.create_text(875, 300, text='3')
    canvas.create_text(875, 400, text='4'), canvas.create_text(875, 500, text='5'), canvas.create_text(875, 600, text='6')
    canvas.create_text(875, 700, text='7'), canvas.create_text(875, 800, text='8')
    # Слева
    canvas.create_text(25, 100, text='8'), canvas.create_text(25, 200, text='7'), canvas.create_text(25, 300, text='6')
    canvas.create_text(25, 400, text='5'), canvas.create_text(25, 500, text='4'), canvas.create_text(25, 600, text='3')
    canvas.create_text(25, 700, text='2'), canvas.create_text(25, 800, text='1')
    # Создание шахматных клеток
    canvas_board = Canvas(chessboard, bg='white', width=800, height=800)
    canvas_board.place(x=50, y=50)
    global color
    worb = 0
    row = 0
    col = 0
    # Определение цвета клетки
    for i in range(8):
        for j in range(8):
            worb += 1
            if i % 2 == 0:
                if worb % 2 == 0:
                    color = "white"
                else:
                    color = "black"
            elif i % 2 != 0:
                if worb % 2 != 0:
                    color = "white"
                else:
                    color = "black"
            pole[i][j] = (Button(chessboard, bg=color, relief="flat",command=lambda worb =worb,i=i, j=j: check(worb,i,j)))
            canvas_board.create_window(row, col, anchor=NW, window=pole[i][j], width=100, height=100)
            row += 100
        row = 0
        col += 100
    print(pole)
    # Размещение шахматных фигур на поле
    global img1 ,img2,img3,circle,img4,check_shah_bel,check_shah_cher,poz_lad_x_bel,poz_lad_y_bel,poz_lad_x_cher,poz_lad_y_cher
    circle = PhotoImage(master= canvas_board,file="greencircle.png")
    img1 = PhotoImage(master= canvas_board,file="img10.png")
    img2 = PhotoImage(master= canvas_board,file="img20.png")
    img3 = PhotoImage(master= canvas_board,file="img30.png")
    img4 = PhotoImage(master= canvas_board,file="img40.png")
    # Начальное расположение
    i_wking = random.randint(0, 7)
    j_wking = random.randint(0, 7)
    i_bking = random.randint(0, 7)
    j_bking = random.randint(0, 7)
    i_wrook = random.randint(0, 7)
    j_wrook = random.randint(0, 7)
    i_brook = random.randint(0, 7)
    j_brook = random.randint(0, 7)
    # Выставление веса фигур и картинок
    if chessplace[i_wrook][j_wrook] == 0:
        chessplace[i_wrook][j_wrook] = 1
        pole[i_wrook][j_wrook]['image'] = img3
    else:
        chessplace[i_wrook + 1][j_wrook] = 1
        pole[i_wrook + 1][j_wrook]['image'] = img3
    if chessplace[i_brook][j_brook] == 0:
        chessplace[i_brook][j_brook] = -1
        pole[i_brook][j_brook]['image'] = img4
    else:
        chessplace[i_brook+1][j_brook] = -1
        pole[i_brook+1][j_brook]['image'] = img4
    if chessplace[i_wking][j_wking] == 0:
        chessplace[i_wking][j_wking] = 2
        pole[i_wking][j_wking]['image'] = img1
        check_hod(i_wking,j_wking,chessplace[i_wking][j_wking],2)
    else:
        chessplace[i_wking+1][j_wking] = 2
        pole[i_wking+1][j_wking]['image'] = img1
        check_hod(i_wking+1, j_wking, chessplace[i_wking][j_wking], 2)
    if chessplace[i_bking][j_bking] == 0:
        chessplace[i_bking][j_bking] = -2
        pole[i_bking][j_bking]['image'] = img2
        check_hod(i_bking, j_bking, chessplace[i_bking][j_bking], 2)
    else:
        chessplace[i_bking + 1][j_bking] = -2
        pole[i_bking+1][j_bking]['image'] = img2
        check_hod(i_bking + 1, j_bking, chessplace[i_bking][j_bking], 2)
    print(chessplace)
    chessboard.mainloop()
root.resizable(width=False, height=False)
root.mainloop()
